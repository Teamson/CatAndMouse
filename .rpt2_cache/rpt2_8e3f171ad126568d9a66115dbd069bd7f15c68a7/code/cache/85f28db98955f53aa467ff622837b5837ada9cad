{
  "code": "import GameLogicCrl from \"../Crl/GameLogicCrl\";\r\nimport StarPoint from \"../Crl/StarPoint\";\r\nexport default class AStar {\r\n    static initAStar() {\r\n        this.mapNodeArr = [];\r\n        this.openList = [];\r\n        this.closeList = [];\r\n        this.currentNode = null;\r\n        for (let i = 0; i < GameLogicCrl.Share._starNode.numChildren; i++) {\r\n            this.mapNodeArr.push(GameLogicCrl.Share._starNode.getChildAt(i));\r\n        }\r\n    }\r\n    static getMyStarId(pos) {\r\n        for (let i = 0; i < this.mapNodeArr.length; i++) {\r\n            let n = this.mapNodeArr[i];\r\n            let nPos = new Laya.Vector2(n.transform.position.clone().x, n.transform.position.clone().z);\r\n            let mPos = new Laya.Vector2(pos.x, pos.z);\r\n            if (mPos.x <= nPos.x + this.gridWidth / 2 && mPos.x >= nPos.x - this.gridWidth / 2 &&\r\n                mPos.y <= nPos.y + this.gridWidth / 2 && mPos.y >= nPos.y - this.gridWidth / 2) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n    static getNodeById(id) {\r\n        return this.mapNodeArr[id];\r\n    }\r\n    static getArrIndexById(id) {\r\n        let xx = Math.floor(id % 9);\r\n        let yy = Math.floor(id / 9);\r\n        return new Laya.Vector2(xx, yy);\r\n    }\r\n    static getPCrl(id) {\r\n        let p = this.getNodeById(id);\r\n        let crl = p.getComponent(StarPoint);\r\n        return crl;\r\n    }\r\n    static getNearGrids(id) {\r\n        let arr = [];\r\n        if (this.getPCrl(id).arrIndex.y - 1 >= 0) {\r\n            let n = this.getNodeById(id - 9);\r\n            if (this.closeList.indexOf(n) == -1 && this.openList.indexOf(n) == -1 && !n.getComponent(StarPoint).isColl)\r\n                arr.push(n);\r\n        }\r\n        if (this.getPCrl(id).arrIndex.x + 1 <= 8) {\r\n            let n = this.getNodeById(id + 1);\r\n            if (this.closeList.indexOf(n) == -1 && this.openList.indexOf(n) == -1 && !n.getComponent(StarPoint).isColl)\r\n                arr.push(n);\r\n        }\r\n        if (this.getPCrl(id).arrIndex.y + 1 <= 12) {\r\n            let n = this.getNodeById(id + 9);\r\n            if (this.closeList.indexOf(n) == -1 && this.openList.indexOf(n) == -1 && !n.getComponent(StarPoint).isColl)\r\n                arr.push(n);\r\n        }\r\n        if (this.getPCrl(id).arrIndex.x - 1 >= 0) {\r\n            let n = this.getNodeById(id - 1);\r\n            if (this.closeList.indexOf(n) == -1 && this.openList.indexOf(n) == -1 && !n.getComponent(StarPoint).isColl)\r\n                arr.push(n);\r\n        }\r\n        return arr;\r\n    }\r\n    static readyToCal(startId, endId) {\r\n        this.closeList = [];\r\n        this.openList = [];\r\n        this.currentNode = null;\r\n        for (let i = 0; i < this.mapNodeArr.length; i++) {\r\n            this.mapNodeArr[i].getComponent(StarPoint).aStarF = 0;\r\n            this.mapNodeArr[i].getComponent(StarPoint).aStarG = 0;\r\n            this.mapNodeArr[i].getComponent(StarPoint).aStarH = 0;\r\n        }\r\n        this.closeList.push(this.getNodeById(startId));\r\n        this.currentNode = this.getNodeById(startId);\r\n        this.calWayPoint(startId, endId);\r\n        if (this.closeList.length <= 0) {\r\n            return [];\r\n        }\r\n        return this.closeList[this.closeList.length - 1].getComponent(StarPoint).myId == endId ? this.closeList : [];\r\n    }\r\n    static calWayPoint(startId, endId) {\r\n        let nArr = this.getNearGrids(startId);\r\n        if (nArr.length <= 0) {\r\n            return;\r\n        }\r\n        let minF = 999;\r\n        let minN = null;\r\n        for (let i = 0; i < nArr.length; i++) {\r\n            let n = nArr[i];\r\n            let nCrl = n.getComponent(StarPoint);\r\n            nCrl.aStarG += 10 + this.currentNode.getComponent(StarPoint).aStarG;\r\n            nCrl.aStarH = Math.abs(nCrl.arrIndex.x - this.getArrIndexById(endId).x) + Math.abs(nCrl.arrIndex.y - this.getArrIndexById(endId).y);\r\n            nCrl.aStarF = nCrl.aStarG + nCrl.aStarH;\r\n            if (nCrl.aStarF <= minF) {\r\n                minF = nCrl.aStarF;\r\n                minN = n;\r\n            }\r\n            this.openList.push(n);\r\n        }\r\n        if (minN) {\r\n            this.closeList.push(minN);\r\n            this.currentNode = minN;\r\n            if (minN.getComponent(StarPoint).myId == endId) {\r\n            }\r\n            else {\r\n                let closeListLength = this.closeList.length;\r\n                this.calWayPoint(this.mapNodeArr.indexOf(minN), endId);\r\n                if (closeListLength == this.closeList.length) {\r\n                    this.closeList.splice(this.closeList.indexOf(minN), 1);\r\n                    nArr.splice(nArr.indexOf(minN), 1);\r\n                    if (nArr.length > 0) {\r\n                        let n = nArr[0];\r\n                        this.calWayPoint(this.mapNodeArr.indexOf(n), endId);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n        }\r\n    }\r\n}\r\nAStar.mapNodeArr = [];\r\nAStar.currentNode = null;\r\nAStar.gridWidth = 1;\r\nAStar.openList = [];\r\nAStar.closeList = [];\r\n",
  "references": [
    "E:/GitProjects/CatAndMouse/src/Crl/GameLogicCrl.ts",
    "E:/GitProjects/CatAndMouse/src/Crl/StarPoint.ts"
  ]
}
